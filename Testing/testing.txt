/Testing the Parser

//Assert Testing
I have done carried out asssert testing for functions where this is possible
and not overly contrived. 
However, as this is a recursive descent parser it is difficult to test some 
functions in isolation. Instead I have written several .ttl scripts, each of 
which contain errors which should cause one of the functions which make up the 
parser to fail. By testing if the error messages output are as expected for these 
scripts, I can check if each function is working as expected.

///Changes made
    -ltr(): realised I needed to check strlen within the function to prevent
    e.g. Cabbage being a valid letter
    - added a boolean isvar flag to arguments of ltr() to prevent e.g. LOOP $C 
    from being parsed succesfully
    -added checking for program end in inlist()

/Testing the interpreter

//Assert testing
As with the parser, I carried out assert testing where possible and also wrote 
some test .ttl scripts designed to crash the interpreter but not the parser to 
ensure additional interpreting fucntionality not already tested in the parser was 
behaving as expected.

///Changes made
    -Realised that I needed to have a function to jump to the end of a loop if
    that loop had no items.
    - Also wrote a similar function to be run for all loops which would check 
    if the loop had an end and if no end was found, it prints an errror
    message to the console.
    - also added this function the the parser

//Shell script comparing my outputs to Neill's outputs
If my results where comparable to Neill's, I believed that it was reasonably 
safe to conclude that my parser was working as intended. I used the comparepdf
package to compare my pdf outputs to Neill's by writing a the shell script
comp_pdf.sh. For all pdf files, comparepdf output "No differences detected". It 
is therefore reasonable to conclude that the interpreter and postscript functions
are working correctly. In the same shell script, I used diff to compare my .txt
outputs to Neill's. Here, there were some differences between some files. These
were however, very subtle, usually off by 1 character to the right or left,
 and (given that our .pdf outputs are the same) likely caused subtle differences 
 in the approximations I used in order to render lines with letters in .txt format
 The results of running the shell script are saved in "Testing/comp_pdf_out.txt"

//Extension
The extension did not require extesnive testing as it used functions which had
already been tested as part of the interpreter and SDL functions which cannot be
tested. It behaved as expected within the SDL window in response to key inputs
and output the same image drawn in SDL as a pdf appropriately.

